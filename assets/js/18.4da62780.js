(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{437:function(a,t,s){"use strict";s.r(t);var e=s(65),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("ul",[s("li",[a._v("1、抽象类和方法都不能被实例化")]),a._v(" "),s("li",[a._v("2、抽象类可以实现接口")]),a._v(" "),s("li",[a._v("3、抽象类方法默认访问权限都是default")]),a._v(" "),s("li",[a._v("4、接口就是访问的，默认访问权限都是public")])]),a._v(" "),s("hr"),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"fmn"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("ul",[s("li",[s("code",[a._v("x.toUpperCase()")]),a._v('时,在堆中new一个"FMN"对象，但无任何引用指向它。也就是说其实'),s("code",[a._v("x.toUpperCase()")]),a._v("创建了一个新字符串.")]),a._v(" "),s("li",[a._v("但是这里默认没给它起名字,这个方法是不会改变x这个字符串的.")])]),a._v(" "),s("hr"),a._v(" "),s("ul",[s("li",[a._v("依赖注入和控制反转是对同一件事情的不同描述，从某个方面讲，就是它们描述的角度不同。依赖注入是从应用程序的角度在描述，可以把依赖注入描述完整点：应用程序依赖容器创建并注入它所需要的外部资源；而控制反转是从容器的角度在描述，描述完整点：容器控制应用程序，由容器反向的向应用程序注入应用程序所需要的外部资源。")])]),a._v(" "),s("hr"),a._v(" "),s("ul",[s("li",[a._v("switch使用时,case x后面跟的这个x如果是switch()括号中传过来的,就执行case x")]),a._v(" "),s("li",[a._v("而如果不break,就会继续往下执行case x+1,case x+2直到整个结构结束")])]),a._v(" "),s("hr"),a._v(" "),s("ul",[s("li",[a._v("Servlet中使用forward,不在地址栏显示跳转后的地址.")])]),a._v(" "),s("hr"),a._v(" "),s("ul",[s("li",[a._v("接口中方法即使两个都不写也默认public abstract修饰")])]),a._v(" "),s("hr"),a._v(" "),s("ul",[s("li",[a._v("Java集合框架主要由Collection和Map两个根接口及其子接口、实现类组成。 collection 的子接口包括List,set,queue。而Map包括三个实现类HashMap，HashTable，LinkeHashMap")])]),a._v(" "),s("hr")])}),[],!1,null,null,null);t.default=n.exports}}]);