(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{439:function(t,s,a){"use strict";a.r(s);var i=a(65),v=Object(i.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git笔记"}},[t._v("#")]),t._v(" Git笔记")]),t._v(" "),a("h2",{attrs:{id:"准备工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[t._v("#")]),t._v(" 准备工作")]),t._v(" "),a("h3",{attrs:{id:"连接远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接远程仓库"}},[t._v("#")]),t._v(" 连接远程仓库")]),t._v(" "),a("h4",{attrs:{id:"ssh方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssh方法"}},[t._v("#")]),t._v(" SSH方法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("因为Github慢慢的要放弃账号密码方法,所以我们必须学着ssh方法连接远程仓库")])]),t._v(" "),a("li",[a("p",[t._v("首先随便打开git bash,不用在乎目录")])]),t._v(" "),a("li",[a("p",[t._v("输入ssh命令,回车查看是否已安装ssh")])]),t._v(" "),a("li",[a("p",[t._v("如果已经安装就输入"),a("code",[t._v("ssh-keygen -t rsa")]),t._v("命令,连续回车直到完成")])]),t._v(" "),a("li",[a("p",[t._v("这时候就生成了两个文件，分别为秘钥 id_rsa 和公钥 id_rsa.pub")])]),t._v(" "),a("li",[a("p",[t._v("命令行会告诉你文件生成在了哪里")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ ssh-keygen -t rsa\nGenerating public/private rsa key pair.\nEnter "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("which")]),t._v(" to save the key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/c/Users/Administrator/.ssh/id_rsa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n/c/Users/Administrator/.ssh/id_rsa already exists.\nOverwrite "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y/n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("?\n\n")])])])]),t._v(" "),a("li",[a("p",[t._v("使用笔记本打开id_rsa.pub文件,复制里面所有内容,打开github的setting->SSH and GPG keys->New SSH key")])]),t._v(" "),a("li",[a("p",[t._v("名字自己想,value填复制的内容")])]),t._v(" "),a("li",[a("p",[t._v("完成之后在git bash中输入"),a("code",[t._v("ssh -T git@github.com")]),t._v("校验")])]),t._v(" "),a("li",[a("p",[t._v("如果是第一次会提出询问,填写yes回车即可,成功会提示你you've successful....")])]),t._v(" "),a("li",[a("p",[t._v("提交文件到远程服务器有两种办法,我只使用了第二种")]),t._v(" "),a("ul",[a("li",[t._v("建立一个本地仓库进入，init 初始化；")]),t._v(" "),a("li",[t._v("关联远程仓库；")]),t._v(" "),a("li",[t._v("同步远程仓库和本地仓库；")]),t._v(" "),a("li",[t._v("将文件添加提交到本地仓库；")]),t._v(" "),a("li",[t._v("将本地仓库的内容 push 到远程仓库。")])])]),t._v(" "),a("li",[a("p",[t._v("首先进入项目根目录,初始化你的项目仓库,也就是输入"),a("code",[t._v("git init")])])]),t._v(" "),a("li",[a("p",[t._v("之后就是提交"),a("code",[t._v("git add.")]),t._v(","),a("code",[t._v('git commit -m "xxx"')])])]),t._v(" "),a("li",[a("p",[t._v("然后去复制git仓库上的地址,选择SSH而不是HTTPS")])]),t._v(" "),a("li",[a("p",[t._v("在bash中输入"),a("code",[t._v("git remote add origin git@github.com:emptybamboo/Algorithm-Diagram-Code.git")])])]),t._v(" "),a("li",[a("p",[t._v("然后"),a("code",[t._v("git push origin master")]),t._v("即可把本地项目推到远程")])]),t._v(" "),a("li",[a("p",[t._v("如果要把远程拉到本地使用"),a("code",[t._v("git pull origin master")])])])]),t._v(" "),a("h5",{attrs:{id:"检查是否已经生成本地ssh秘钥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查是否已经生成本地ssh秘钥"}},[t._v("#")]),t._v(" 检查是否已经生成本地ssh秘钥")]),t._v(" "),a("ul",[a("li",[t._v("一般来讲本地秘钥都是在C盘的固定位置")]),t._v(" "),a("li",[t._v("在桌面右键打开gitbash,然后输入"),a("code",[t._v("cd ~/.ssh")])]),t._v(" "),a("li",[t._v("如果看到秘钥文件那就说明是已经生成过ssh秘钥的")])]),t._v(" "),a("h3",{attrs:{id:"将远程项目拉到本地"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将远程项目拉到本地"}},[t._v("#")]),t._v(" 将远程项目拉到本地")]),t._v(" "),a("h4",{attrs:{id:"ssh方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssh方法-2"}},[t._v("#")]),t._v(" SSH方法")]),t._v(" "),a("ul",[a("li",[t._v("首先检查又没有生成过ssh秘钥,如果没有就自己去生成")]),t._v(" "),a("li",[t._v("然后到github里面的setting中的SSH and GPG keys中去粘贴秘钥内容即可")]),t._v(" "),a("li",[t._v("进入到想放置远程git项目的目录,在这个目录打开命令行,输入"),a("code",[t._v('git clone "github中的code按钮下的ssh地址"')])]),t._v(" "),a("li",[t._v("克隆完成就拉取好项目并且和远程仓库关联了")])]),t._v(" "),a("h2",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),a("h3",{attrs:{id:"gitattributes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitattributes"}},[t._v("#")]),t._v(" gitattributes")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("git的这个功能可以做到,"),a("strong",[t._v("不同的分支之间覆盖代码时")]),t._v(",可以"),a("strong",[t._v("忽略某些文件")]),t._v("不把这些文件覆盖给对应的分支")])]),t._v(" "),a("li",[a("p",[t._v("这么说可能有点绕,解释得详细点,某项目有两个分支,A分支和B分支,然后这个项目对接了第三方API,这个API是需要根据当前环境是测试环境还是正式环境进行代码中的一些配置的修改,比如请求的url的前半部分,一些变量")])]),t._v(" "),a("li",[a("p",[t._v("A分支代表测试环境分支,B分支代表正式环境分支,那在这两个分支中,我们自然会希望代码中的配置不会被我们覆盖修改代码时改变,这种配置代码的文件类一般也很少改动")])]),t._v(" "),a("li",[a("p",[t._v("那么我们就需要去新建一个gitattributes文件,命名为"),a("code",[t._v(".gitattributes")]),t._v(",在其中根据规则写好我们需要在覆盖分支代码时忽略的文件,然后就不会出现这个问题了,本身我去查询相关知识时,有人说这个功能有一个文件修改时间先后的要求,搞得很麻烦很不方便,但我实际使用时发现不用考虑这个就可以达成效果")])]),t._v(" "),a("li",[a("p",[t._v("gitattributes文件一定是"),a("strong",[t._v("创建在你需要覆盖别的代码到这个分支的分支")]),t._v(",比如这里就是正式环境分支,只有别的环境往这里合代码,一般这个分支不会把代码覆盖给别的分支")])]),t._v(" "),a("li",[a("p",[t._v("我使用的gitattributes文件内容如下")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# merge时需要忽略的文件\nfinancial-leasing-common/src/main/java/com/shineray/financial/common/api/anxinsign/constant/Request.java merge=ours\nfinancial-leasing-common/src/main/java/com/shineray/financial/common/api/anxinsign/connector/HttpConnector.java merge=ours\nfinancial-leasing-common/src/main/java/com/shineray/financial/common/api/authentication/api/CpcnAuthenticationApi.java merge=ours\n")])])])])])])}),[],!1,null,null,null);s.default=v.exports}}]);