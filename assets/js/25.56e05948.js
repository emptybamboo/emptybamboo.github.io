(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{443:function(t,s,a){"use strict";a.r(s);var n=a(65),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"字符串-p45-54-2019-7-21-21-49-59"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串-p45-54-2019-7-21-21-49-59"}},[t._v("#")]),t._v(" 字符串(p45-54,2019-7-21 21:49:59)")]),t._v(" "),a("h4",{attrs:{id:"子串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子串"}},[t._v("#")]),t._v(" 子串")]),t._v(" "),a("ul",[a("li",[t._v("String类的substring方法可以从一个较大的字符串提取出一个子串,例如:")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果为Hel")]),t._v("\n")])])]),a("ul",[a("li",[t._v("substring方法的第二个参数是不想复制的第一个位置,例子中从0开始计数,直到3位置,但不包含3.")]),t._v(" "),a("li",[t._v("这个方法很好计算子串长度,"),a("code",[t._v("x.substring(a,b)")]),t._v("长度为b-a,如例子中"),a("code",[t._v("x.substring(0,3)")]),t._v("长度为3-0=3.")])]),t._v(" "),a("hr"),t._v(" "),a("h4",{attrs:{id:"拼接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拼接"}},[t._v("#")]),t._v(" 拼接")]),t._v(" "),a("ul",[a("li",[t._v("当把一个非字符串的值和一个字符串进行拼接,前者会被转换成字符串("),a("strong",[t._v("任何一个Java对象都可以被转换成字符串")]),t._v(").")]),t._v(" "),a("li",[t._v("如果要把多个字符串放在一起,用一个定界符分割,就使用静态join方法.("),a("strong",[t._v("静态意味着直接拿来用")]),t._v(")")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" all "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"S"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"M"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"L"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XL"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//将会得到字符串"S/M/L/XL"')]),t._v("\n")])])]),a("h4",{attrs:{id:"检查字符串是否相等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查字符串是否相等"}},[t._v("#")]),t._v(" 检查字符串是否相等")]),t._v(" "),a("ul",[a("li",[t._v("可以使用"),a("strong",[t._v("equals")]),t._v("检测两个字符串是否相等.")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//相等返回true,不相等返回false")]),t._v("\n")])])]),a("ul",[a("li",[t._v('s和t可以使字符串变量(x = "Hello",x就是变量),也可以是字符串字面量("Hello"就是字符串字面量),例如,下面的表达式是合法的:')])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[a("strong",[a("u",[t._v("一定不要使用==运算符检测两个字符串是否相等")])]),t._v(",==这个运算符只能确定两个字符串是否放置在同一个位置上("),a("strong",[t._v("也就是地址值是否相等")]),t._v(").当然,如果字符串放置在同一个位置上,它们必然相等.但是,完全有可能将内容相同的多个字符串的拷贝位置放在不同的位置上.")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始化一个x字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可能为true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hel"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可能为false")]),t._v("\n\n")])])]),a("ul",[a("li",[t._v("只有字符串常量是共享的(共享同一个地址值),而+或substring操作残剩的结果并不共享,所以不要使用==运算符检测字符串的相等性.")])]),t._v(" "),a("h4",{attrs:{id:"api中常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api中常用方法"}},[t._v("#")]),t._v(" API中常用方法")]),t._v(" "),a("ul",[a("li",[t._v("String trim,这个方法将会删去字符串首尾的空格.")]),t._v(" "),a("li",[t._v("String join,将会以第一个给入的符号为分隔符,分开之后的几个字符.")])]),t._v(" "),a("h4",{attrs:{id:"构建字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建字符串"}},[t._v("#")]),t._v(" 构建字符串")]),t._v(" "),a("ul",[a("li",[t._v("有时候需要由较短的字符串构建字符串,采用字符串连接的方式效率太低,每次连接都会构建一个新的String对象,应该使用"),a("strong",[t._v("StringBuilder")]),t._v("类避免这个问题.")]),t._v(" "),a("li",[t._v("步骤如下:")]),t._v(" "),a("li",[t._v("如果需要许多小段字符串构建成一个字符串,首先构成一个空的字符串构建器:")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),t._v(" builder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("每次需要添加一部分内容就调用append方法")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("builder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("在需要构建字符串时就调用"),a("strong",[t._v("toString")]),t._v("方法,就会得到一个String对象,其中包含了构建器中的字符序列.")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" completedString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" builder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("strong",[t._v("StringBuilder这个类的前身是StringBuffer,其效率稍有些低,但是允许采用多线程的方式执行添加或删除字符的操作.如果搜有字符串在一个单线程中编译(通常都是这样),则应该用StringBuilder代替它."),a("u",[t._v("(意思就是绝大多数时候都用的是StringBuilder)")]),t._v(".")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);