(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{509:function(t,a,e){"use strict";e.r(a);var s=e(65),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"rabbitmq入门"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq入门"}},[t._v("#")]),t._v(" "),e("strong",[t._v("RabbitMQ入门")])]),t._v(" "),e("ul",[e("li",[t._v("刚开始我一直不明白什么是所谓中间件,对MQ的具体定位和概念模糊不清,以为是和Java项目深度绑定的一个东西,类似maven中拉来的某个依赖一样,结果某一天我突然开窍了,明白不是如此")]),t._v(" "),e("li",[t._v("MQ这种中间件,顾名思义,是"),e("strong",[t._v("不依赖任何项目")]),t._v("的"),e("strong",[t._v("单独组件")]),t._v(",就和Mysql类似的,"),e("strong",[t._v("独立部署")]),t._v("在那里,不同的项目可以通过这个中间件来交互数据,A项目作为生产者,B项目作为消费者,一个发数据,一个接数据,各司其职")])]),t._v(" "),e("h2",{attrs:{id:"核心概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[t._v("#")]),t._v(" 核心概念")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("RabbitMQ")]),t._v(" 整体上是一个"),e("strong",[t._v("生产者")]),t._v("与"),e("strong",[t._v("消费者模型")]),t._v("，主要负责接收、存储和转发消息。可以把消息传递的过程想象成：当你将一个包裹送到邮局，邮局会暂存并最终将邮件通过邮递员送到收件人的手上，"),e("code",[t._v("RabbitMQ")]),t._v("就好比由"),e("strong",[t._v("邮局")]),t._v("、"),e("strong",[t._v("邮箱")]),t._v("和"),e("strong",[t._v("邮递员")]),t._v("组成的一个系统。从计算机术语层面来说，"),e("code",[t._v("RabbitMQ")]),t._v("模型"),e("strong",[t._v("更像")]),t._v("是一种"),e("strong",[t._v("交换机模型")]),t._v("。")])]),t._v(" "),e("h3",{attrs:{id:"producer-生产者-和-consumer-消费者"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#producer-生产者-和-consumer-消费者"}},[t._v("#")]),t._v(" Producer(生产者) 和 Consumer(消费者)")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Producer(生产者)")]),t._v(" :生产消息的一方（邮件投递者）")]),t._v(" "),e("li",[e("strong",[t._v("Consumer(消费者)")]),t._v(" :消费消息的一方（邮件收件人）")]),t._v(" "),e("li",[t._v("消息一般由 2 部分组成："),e("strong",[t._v("消息头")]),t._v("（或者说是标签 Label）和 "),e("strong",[t._v("消息体")]),t._v("。\n"),e("ul",[e("li",[e("strong",[t._v("消息体")]),t._v("也可以称为 "),e("code",[t._v("payLoad")]),t._v(" ,消息体是不透明的.")]),t._v(" "),e("li",[t._v("而"),e("strong",[t._v("消息头")]),t._v("则由一系列的可选属性组成，这些属性包括 "),e("code",[t._v("routing-key（路由键")]),t._v("）、"),e("code",[t._v("priority（相对于其他消息的优先权）")]),t._v("、"),e("code",[t._v("delivery-mode（指出该消息可能需要持久性存储）")]),t._v("等。生产者把消息交由"),e("code",[t._v("RabbitMQ")]),t._v(" 后，"),e("code",[t._v("RabbitMQ")]),t._v("会根据消息头把消息发送给感兴趣的 Consumer(消费者)。")])])])]),t._v(" "),e("h3",{attrs:{id:"exchange-交换器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exchange-交换器"}},[t._v("#")]),t._v(" Exchange(交换器)")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("在 "),e("code",[t._v("RabbitMQ")]),t._v(" 中，消息并不是直接被投递到 "),e("strong",[t._v("Queue(消息队列)")]),t._v(" 中的，中间还必须经过 "),e("strong",[t._v("Exchange(交换器)")])])]),t._v(" "),e("li",[e("p",[t._v("交换器接收生产者发送的消息,然后路由到服务器的队列中,如果路由不到就返回给生产者或丢弃")])])]),t._v(" "),e("h4",{attrs:{id:"exchange-types-交换器类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exchange-types-交换器类型"}},[t._v("#")]),t._v(" Exchange Types(交换器类型)")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("RabbitMQ 常用的 Exchange Type 有 "),e("strong",[t._v("fanout")]),t._v("、"),e("strong",[t._v("direct")]),t._v("、"),e("strong",[t._v("topic")]),t._v("、"),e("strong",[t._v("headers")]),t._v(" 这四种（AMQP规范里还提到两种 Exchange Type，分别为 system 与 自定义，这里不予以描述）。")]),t._v(" "),e("h5",{attrs:{id:"_1-fanout"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-fanout"}},[t._v("#")]),t._v(" ① fanout")]),t._v(" "),e("p",[e("strong",[t._v("fanout")]),t._v(" 类型的Exchange路由规则非常简单，它会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中，"),e("strong",[t._v("不需要做任何判断操作")]),t._v("，所以 fanout 类型是所有的交换机类型里面"),e("strong",[t._v("速度最快")]),t._v("的。fanout 类型常用来"),e("strong",[t._v("广播消息")]),t._v("。")]),t._v(" "),e("h5",{attrs:{id:"_2-direct"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-direct"}},[t._v("#")]),t._v(" ② direct")]),t._v(" "),e("p",[e("strong",[t._v("direct")]),t._v(" 类型的Exchange路由规则也很简单，它会把消息路由到那些 "),e("code",[t._v("Bindingkey")]),t._v(" 与 "),e("code",[t._v("outingKey")]),t._v(" "),e("strong",[t._v("完全匹配")]),t._v("的 Queue 中。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://camo.githubusercontent.com/74a37d60211f66e4831fc101de1480d56ca0e0e66757f030c228103bb28a903b/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d31322d31362f33373030383032312e6a7067",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://camo.githubusercontent.com/74a37d60211f66e4831fc101de1480d56ca0e0e66757f030c228103bb28a903b/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d31322d31362f33373030383032312e6a7067",alt:"direct 类型交换器"}}),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v('以上图为例，如果发送消息的时候设置路由键为“warning”,那么消息会路由到 Queue1 和 Queue2。如果在发送消息的时候设置路由键为"Info”或者"debug”，消息只会路由到Queue2。如果以其他的路由键发送消息，则消息不会路由到这两个队列中。')]),t._v(" "),e("p",[t._v("direct 类型常用在"),e("strong",[t._v("处理有优先级的任务")]),t._v("，根据任务的优先级把消息发送到对应的队列，这样可以指派更多的资源去处理高优先级的队列。")]),t._v(" "),e("h5",{attrs:{id:"_3-topic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-topic"}},[t._v("#")]),t._v(" ③ topic")]),t._v(" "),e("p",[t._v("前面讲到direct类型的交换器路由规则是完全匹配 "),e("code",[t._v("BindingKey")]),t._v("和 "),e("code",[t._v("RoutingKey")]),t._v(" ，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。"),e("strong",[t._v("topic")]),t._v("类型的交换器在匹配规则上进行了扩展，它与 direct 类型的交换器相似，也是将消息路由到 "),e("code",[t._v("BindingKey")]),t._v("和 "),e("code",[t._v("RoutingKey")]),t._v("相匹配的队列中，但这里的匹配规则有些不同,等于是以"),e("strong",[t._v("特定规则模糊匹配")]),t._v("，它约定：")]),t._v(" "),e("ul",[e("li",[t._v("RoutingKey 为一个点号“．”分隔的字符串（被点号“．”分隔开的每一段独立的字符串称为一个单词），如 “com.rabbitmq.client”、“java.util.concurrent”、“com.hidden.client”;")]),t._v(" "),e("li",[t._v("BindingKey 和 RoutingKey 一样也是点号“．”分隔的字符串；")]),t._v(" "),e("li",[t._v("BindingKey 中可以存在两种特殊字符串“"),e("em",[t._v("”和“#”，用于做模糊匹配，其中“")]),t._v("”用于匹配一个单词，“#”用于匹配多个单词(可以是零个)。")])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://camo.githubusercontent.com/c678fb21b871686d9c1ae5c196c81877c0e014ac9d354c3f01a3ee716dca3fc5/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d31322d31362f37333834332e6a7067",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://camo.githubusercontent.com/c678fb21b871686d9c1ae5c196c81877c0e014ac9d354c3f01a3ee716dca3fc5/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d31322d31362f37333834332e6a7067",alt:"topic 类型交换器"}}),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("以上图为例：")]),t._v(" "),e("ul",[e("li",[t._v("路由键为 “com.rabbitmq.client” 的消息会同时路由到 Queuel 和 Queue2;")]),t._v(" "),e("li",[t._v("路由键为 “com.hidden.client” 的消息只会路由到 Queue2 中；")]),t._v(" "),e("li",[t._v("路由键为 “com.hidden.demo” 的消息只会路由到 Queue2 中；")]),t._v(" "),e("li",[t._v("路由键为 “java.rabbitmq.demo” 的消息只会路由到Queuel中；")]),t._v(" "),e("li",[t._v("路由键为 “java.util.concurrent” 的消息将会被丢弃或者返回给生产者（需要设置 mandatory 参数），因为它没有匹配任何路由键。")])]),t._v(" "),e("h5",{attrs:{id:"_4-headers-不推荐"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-headers-不推荐"}},[t._v("#")]),t._v(" ④ headers(不推荐)")]),t._v(" "),e("p",[t._v("headers 类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中的 headers 属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的 headers（也是一个键值对的形式)'对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers 类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。")])]),t._v(" "),e("li",[e("p",[t._v("生产者把消息发给交换器的时候会指定一个**RoutingKey(路由键)"),e("strong",[t._v("来指定该消息的路由规则,这个路由键必须和交换器类型以及")]),t._v("绑定键(BindingKey)**联合使用才能最终生效")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("可以这样理解:交换器就是个中间人,他拥有自己的类型,由自己的类型去决定该不该将拥有某些路由键的消息接纳进来,然后再根据绑定键(可多个)确定和交换器自己会产生关联的队列,再根据交换器类型决定要怎么分配这些消息到队列中.交换器和队列是多对多的关系")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("绑定键确定交换器和队列之间的关联关系,是交换器和队列的一个通道桥梁,这个桥梁可以是完整的一个字符串,也可以是一个模糊匹配的规则型字符串,根据交换器的类型不同而决定如何匹配路由键.而路由键则一定是一个完整的字符串,也是根据交换器的类型不同而决定如何匹配绑定键.")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("一个消息需要先指定交换器,在java中是"),e("code",[t._v("convertAndSend(exchange, routingKey, message)")]),t._v("这个方法指定Exchange、Routing Key以及消息本身。如果找不到对应交换器就会报错,路由键匹配不到也会报错")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("教程中说到如果路由键匹配不到队列除了报错还可以返回给生产者,这个就需要在Java代码中自己开启了.")])])])]),t._v(" "),e("h3",{attrs:{id:"broker-消息中间件的服务节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#broker-消息中间件的服务节点"}},[t._v("#")]),t._v(" Broker（消息中间件的服务节点）")]),t._v(" "),e("ul",[e("li",[t._v("据观察broker就是交换器+队列")])]),t._v(" "),e("h2",{attrs:{id:"安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),e("ul",[e("li",[t._v("windows系统的安装首先需要去"),e("code",[t._v("erlang")]),t._v("官网下载"),e("code",[t._v("erlang")])]),t._v(" "),e("li",[t._v("但是要注意"),e("code",[t._v("erlang")]),t._v("版本和"),e("code",[t._v("rabbitmq")]),t._v("版本是要严格对应的,不对应会出问题.")]),t._v(" "),e("li",[t._v("其实可以先下载"),e("code",[t._v("rabbitmq")]),t._v("的安装程序,安装的时候会告诉你,还没安装"),e("code",[t._v("erlang")]),t._v("是否跳转到"),e("code",[t._v("erlang")]),t._v("官网,你点击是跳进去下载更方便")]),t._v(" "),e("li",[t._v("安装好"),e("code",[t._v("erlang")]),t._v("去配置环境变量,配置好之后就可以安装"),e("code",[t._v("rabbitmq")])]),t._v(" "),e("li",[t._v("安装完成之后这时你打开"),e("code",[t._v("RabbitService MQ - start")]),t._v(",进入它自带的后台管理地址"),e("code",[t._v("http://localhost:15672")]),t._v(".发现进不去")]),t._v(" "),e("li",[t._v("需要打开cmd运行"),e("code",[t._v("rabbitmq-plugins enable rabbitmq_management")]),t._v("之后才可以正常打开")])]),t._v(" "),e("h2",{attrs:{id:"使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("队列的创建是在管理后台手动创建的,交换器也是,然后在交换器的部分,有一个binding也就是路由规则也需要在后台手动编辑")])]),t._v(" "),e("li",[e("p",[t._v("首先需要再pom.xml引入依赖")]),t._v(" "),e("div",{staticClass:"language-xml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-amqp"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("然后在yml文件中配置")]),t._v(" "),e("div",{staticClass:"language-yml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rabbitmq")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5672")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("username")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" guest\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" guest\n")])])])]),t._v(" "),e("li",[e("p",[t._v("启动类中我们需要配置注入"),e("code",[t._v("MessageConverter")]),t._v("对象")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("MessageConverter")]),t._v("用于将Java对象转换为RabbitMQ的消息。默认情况下，Spring Boot使用"),e("code",[t._v("SimpleMessageConverter")]),t._v("，只能发送"),e("code",[t._v("String")]),t._v("和"),e("code",[t._v("byte[]")]),t._v("类型的消息，不太方便。使用"),e("code",[t._v("Jackson2JsonMessageConverter")]),t._v("，我们就可以发送JavaBean对象，由Spring Boot自动序列化为JSON并以文本消息传递。")])]),t._v(" "),e("li",[e("p",[t._v("引入starter之后所有rabbitmq的bean自动装配,我们就可以拿到rabbitTemplate.这个对象是使用在生产者模块的.")])]),t._v(" "),e("li",[e("p",[t._v("发送消息时，使用"),e("code",[t._v("convertAndSend(exchange, routingKey, message)")]),t._v("可以指定Exchange、Routing Key以及消息本身。这里传入JavaBean后会自动序列化为JSON文本。上述代码将"),e("code",[t._v("RegistrationMessage")]),t._v("发送到"),e("code",[t._v("registration")]),t._v("，将"),e("code",[t._v("LoginMessage")]),t._v("发送到"),e("code",[t._v("login")]),t._v("，并根据登录是否成功来指定Routing Key。")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessagingService")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RabbitTemplate")]),t._v(" rabbitTemplate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendRegistrationMessage")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegistrationMessage")]),t._v(" msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这个方法就是把消息发送到rabbitmq中,也就是找个交换器往里塞")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第一个参数是交换器的名字,第二个是路由键,第三个是我们要传递的消息对象")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//路由键可以不指定,消息就会被塞到指定交换器的不需要对应路由键的队列中去")]),t._v("\n        rabbitTemplate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("convertAndSend")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"registration"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendLoginMessage")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LoginMessage")]),t._v(" msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" routingKey "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("success "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"login_failed"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        rabbitTemplate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("convertAndSend")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"login"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" routingKey"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("接收消息时在对应的接收方法上使用"),e("code",[t._v("@RabbitListener")]),t._v("注解,属性"),e("code",[t._v("queues = QUEUE_MAIL")]),t._v("等于号后面是队列的名字,然后在方法里写这个队列接收到消息时的处理业务")])]),t._v(" "),e("li",[e("p",[t._v("直接指定一个Queue并投递消息也是可以的，此时指定Routing Key为Queue的名称即可，因为RabbitMQ提供了一个"),e("code",[t._v("default exchange")]),t._v("用于根据Routing Key查找Queue并直接投递消息到指定的Queue。但是要实现一对多的投递就必须自己配置Exchange。")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);